一、缓存有哪些类型？
    缓存是高并发开发场景下提高热点数据访问性能的一个有效手段，在开发项目时会经常使用到。
    缓存的类型分为：本地缓存、分布式缓存和多级缓存

    ① 本地缓存
        本地缓存就是在进程的内存中进行缓存，本地缓存是北村访问，没有远程交互开销，性能最好，但是受限于单机容量，一般缓存较小且无法扩展。
    ② 分布式缓存
        分布式缓存一般都具有良好的水平扩展功能，对较大数据量的场景也能应付自如。缺点就是需要进行远程请求，性能不如本地缓存。
    ③ 多级缓存
        为了平衡这种情况，实际业务中一般采用多级缓存，本地缓存只保存频繁访问频率最高的部分热点数据，其他的热点数据放在分布式缓存中。
        在目前的一线大厂，这也是最常用的缓存方案，单靠单一的缓存方案往往难以支撑柱很多高并发的场景。
    淘汰策略
        不管是本地缓存还是分布式缓存，为了保证较高性能，都是使用内存来保存数据，由于成本和内存的限制，当存储的数据超过缓存容量时，需要对缓存的数据进行剔除。
        一般的剔除策略有FIFO淘汰最早数据、LRU剔除最近最少使用、和LFU剔除最近使用频率最低的数据几种策略。
        ·noeviction：返回错误当内存限制达到并且客户端常识之星会让更多内存被使用的命令（大部分的写入指令，但DEL和几个例外）
        ·allkeys-lru：尝试回收最少使用的键（LRU），使得新添加的数据有空间存放。
        ·volatile-lru：尝试回收最少使用的键（LRU），但仅限于在过期集合的键，使得新添加的数据有空间存放。
        ·allkeys-random：回收随机的键使得新添加的数据有空间存放。
        ·volatile-random：回收随机的键使得新添加的数据有空间存放，但仅限于过期集合的键。
        ·volatile-ttl：回收在过期集合的键，并且优先回收存活时间（TTL）较短的键，使得新添加的数据有空间存放。
        如果没有键满足回收的前提条件的话，策略volatile-lru，volatile-random以及volatile-ttl就合norviction差不多了。

二、Memcache
    Memcache，以下简称MC，先看MC的特点：
        ·MC处理请求时使用多线程异步IO的方式，可以合理利用CPU多核的优势，性能非常优秀；
        ·MC功能简单，使用内存存储数据
        ·MC的内存结构以及钙化问题
        ·MC对缓存的数据可以设置有效期，过期后的数据会被清除；
        ·失效的策略采用延迟失效，就是当再次使用数据时检查是否失效。
        ·当容量存满时，会对缓存中的数据进行剔除，剔除时除了会对过期的key进行清理，还会按LRU策略对数据进行剔除
    另外，使用MC有一些限制，但这些限制在现在的互联网场景下很致命，称为大家使用Redis和MongoDB的重要原因。
        ·key不能超过250字节；
        ·value不能超过1M字节
        ·key的最大有效时间是30天
        ·只支持K-V结构，不提供持久化和主从同步功能。

三、Redis
    Redis特点：
        ·与MC不同的是，Redis使用单线程模式处理请求。这样做的原因有2个：一个是采用了非阻塞的异步事件处理机制；另一个是缓存数据都是内存操作IO时间不会太长，单线程可以避免上下文切换产生的代价。
        ·Redis支持持久化，所以Redis不仅可以用做缓存，也可以用作NoSQL数据库。
        ·相比MC，Redis还有一个非常强大的优势，就是除了K-V之外，还支持多种数据格式，例如list、set、sorted set、hash
        ·Redis提供主从同步机制，以及Cluster集群部署能力，能够提供高可用服务。

    基础用法参见《4、Redis哨兵》

    高级用法：
        ·Bitmap：位图是支持按bit位来存储信息，可以用来实现布隆过滤器(BloomFilter)
        ·HyperLogLog：供不精确的去重计数功能，比较适合用做大规模的去重统计，比如UV；
        ·Geospatial：可以用来保存地理位置，并作位置距离计算或者根据半径计算位置等。
        ·pub/sub：功能是订阅发布功能，可以用做简单的消息队列。
        ·Pipline：可以批量执行一组指令，一次性返回全部结果，可以减少频繁的请求应答。
        ·Lua：Redis支持提交Lua脚本来执行一系列的功能。
        ·事务：Redis提供的不是严格的事务，Redsi只保证串行执行命令，并且能保证全部执行，但是执行命令失败时并不会回滚，而是会继续执行下去。
    持久化：Redis提供了RDB和AOF两种持久化方法，RDB是把内存中的数据集以快照形式写入磁盘，实际操作是通过fork子进程执行，采用二进制压缩存储；AOF是以文本日志的形式记录Redis处理的每一个写入或删除操作。





