#在UNIX平台上，当某个进程终结之后，该进程需要被其父进程调用wait，否则进程成为僵尸进程(Zombie)。所以，有必要对每个Process对象调用join()方法（实际上等同于wait），对于多线程来说，由于只有一个进程，所以不存在此必要性。


#多个进程之间应该避免共享资源。在多线程中，我们可以比较容易地共享资源，比如用全局变量或者传递参数，在多进程情况下，由于每个进程有自己独立的内存空间，以上方法并不适合，此时我们可以通过共享内存和Manager的方法来共享资源。但这样提高了程序的复杂度，并因为同步的需要而降低了程序的效率。


#python多线程有个全局解释锁(global interpreter lock)，这个锁的意思是任一时间只能有一个线程使用解释器，跟单个cpu跑多个程序一个意思，大家都是轮着用的，这叫“并发”，不是“并行”

#多进程间共享数据，可以使用multiprocessing.Value 和multiprocessing.Array

#在多线程环境中，Python虚拟机按以下方式执行：
#1、设置GIL
#2、切换到一个线程去执行
#3、运行：
"""
a、指定数量的字节码指令
b、线程主动让出控制(可以调用time.sleep(0))
"""
#4、把线程设置为睡眠状态
#解锁GIL
#6、再次重复以上代码

#在调用外部代码（如C、C++扩展函数）时，GIL将会被锁定，直到这个函数结束为止（由于这个过程没有python字节码执行，所以不会做线程切换）